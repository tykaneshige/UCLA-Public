# -*- coding: utf-8 -*-
"""Final Project Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WFos9emnlXP2U_3rOM-qXQfTQlo-UuIV

This program was used to analyze the data for a reaction time experiment. The reaction time data was 
gathered using an arduino and a passive buzzer, where three distinct notes were played. The format of 
each data entry was a tuple where the first element was an integer from 1 to 3 describing what pitch 
was played and the second element was the user's reaction time in milliseconds. The program below 
imports the data via csv file from google drive and generates and analysis of said data. In particular,
this program plots a scatter plot of all data points, separates the data by pitch, calculates the mean
and standard deviation of the data, and generates a histogram with a line of best fit.

"""

from google.colab import drive
drive.mount('drive')

import numpy as np
import matplotlib.pyplot as plt

# --- Functions --- #

"""
import_data(path): 
* Imports your reaction time data and splits it into each respective pitch
* Returns a *list* (not a numpy array) of your data

generate_data(time, print_out = False):
* *time* is reaction time data for one pitch
* This function will calculate the mean and standard deviation of the *time*
* This function can print the mean and standard deviation
  - Nothing will be printed by default
* Returns a *list* of the mean and the standard deviation
  - The mean will be the first element; the standard deviation will be the second element

plot_analysis(mean_arr, std_arr, label_arr, color_arr)
* Plots an overall analysis for all pitches in a test
  - Includes the means of each pitch with errorbars
* *mean_arr* is a list of means calculated from each pitch
* *std_arr* is a list of standard deviations calculated from each pitch
* *label_arr* and *color_arr* are lists of labels and colors for the graph
* See the example below for a better explanation

plot_trends(path, start = 0, end = 0):
* Plots a scatter plot of **all pitches**
* A window can be specified (recommended)
  - All points will be plotted by default

plot_hist(time, label, intervals = 0, color = 'red', alpha = 1):
* Plots a histogram of **one pitch**
  - Automatically calculates the number of intervals, but the number of intervals can be specified directly
* Plots a line of best fit using a gaussian function
* Note that a label is required
"""

# Function for importing data and splitting the data for each pitch
def import_data(path):
  all_data = np.loadtxt(path, delimiter = ',')
  pitch1 = np.array(all_data[np.where(all_data[:,0] == 1), 1] [0])
  pitch2 = np.array(all_data[np.where(all_data[:,0] == 2), 1] [0])
  pitch3 = np.array(all_data[np.where(all_data[:,0] == 3), 1] [0])
  return [pitch1, pitch2, pitch3]

# Function for generating initial data analysis (mean, standard deviation)
def generate_data(time, print_out = False):
  mean = np.mean(time)
  std = np.std(time)

  # Print the data (optional)
  if print_out:
    print("Mean = " + str(np.around(mean, 3)) + "ms")
    print("Standard Deviation = " + str(np.around(std, 3)) + "ms\n")
  
  return [mean, std]

# Plots the mean and standard deviation with errorbars
def plot_analysis(mean_arr, std_arr, label_arr, color_arr):
  
  # Create an array and fill it with the a range of numbers from 1...(size of the mean/std array)
  index_arr = np.arange(1, len(mean_arr) + 1, 1)
 
  # Plot the graph
  for i in index_arr:
    plt.errorbar(index_arr[i - 1], mean_arr[i-1], std_arr[i-1], label = label_arr[i-1], color = color_arr[i-1], linestyle='None', marker='.')
    
  # Label the graph
  plt.title('Mean Reaction Times w/ Standard Deviations')
  plt.ylabel('Reaction Time (ms)')
  plt.legend()

# Plot the overall reaction time trends
def plot_trends(path, start = 0, end = 0):

  # Import data from file
  all_data = np.loadtxt(path, delimiter = ',')
  labels = all_data[:,0]
  times = all_data[:,1]

  if end != 0 and end < len(all_data):
    time_window = times[start:end]
    label_window = labels[start:end]
  else:
    time_window = times
    label_window = labels

  # Colors the points according to their pitch (Used when plotting the trend)
  def color(num):
    if num == 1:
      return 'red'
    if num == 2:
      return 'blue'
    if num == 3:
      return 'green'

  # Create a plot of the reaction times
  for i, pt in enumerate(time_window):
    plt.scatter(i, pt, color = color(label_window[i]))
  
  # Label the graph
  plt.title('Reaction Time Trends')
  plt.xlabel('Index')
  plt.ylabel('Reaction Time (ms)')

  # Construct the legend
  import matplotlib.patches as mpatches
  red = mpatches.Patch(color = 'red', label = 'Low')
  blue = mpatches.Patch(color = 'blue', label = 'Mid')
  green = mpatches.Patch(color = 'green', label = 'High')
  plt.legend(handles = [red, blue, green])

# Gaussian curve function
def gaussian_function(x, amp, mu, sigma):
  e = -0.5 * (((x - mu) / sigma) ** 2)
  y = amp * np.exp(e)
  return y

# Find the frequency of the mean
def count_mean(time, mean, intervals):
  
  # Find the min and max of the data set
  data_min = np.amin(time)
  data_max = np.amax(time)

  # Calculate the size of each bin
  data_range = data_max - data_min
  bin_size = (data_range / intervals)

  # Calculate the boundaries
  bounds = []
  count = []

  # Calculate the frequency of each interval
  for i in range(0, intervals):
    bounds.append(data_min + (i * bin_size))
    count.append(0)
  
  bounds.append(data_max)

  for t in time:
    for i,start in enumerate(bounds):
      
      if (i == (len(bounds) - 1)):
        break
      
      if ((t >= bounds[i]) and (t <= bounds[i+1])):
        count[i] += 1
  
  # Find what interval the mean occurs
  mean_index = 0

  for ind,val in enumerate(bounds):
    if (ind == (len(bounds) - 1)):
        break

    if ((mean >= bounds[ind]) and (mean <= bounds[ind+1])):
      mean_index = ind

  return count[mean_index]

# Calculates an interval and plots a histogram with a guassian curve
def plot_hist(time, label, intervals = 0, color = 'red', alpha = 1):
  
  # Generate a set interval if not given
  if intervals == 0:
    intervals = int(np.ceil(np.sqrt(time.size)))

  print("Number of Intervals: " + str(intervals) + "\n")
  
  # Plot the histogram
  plt.hist(time, bins = intervals, alpha = alpha, label = label, color = color)

  # Plot the gaussian curve
  time.sort()
  results = generate_data(time)
  amp = count_mean(time, results[0], intervals)
  plt.plot(time, gaussian_function(time, amp, results[0], results[1]), label = 'Best Fit', color = color)

  # Label the graph
  plt.title('Frequency of Reaction Times')
  plt.xlabel('Reaction Time (ms)')
  plt.ylabel('Frequency')
  plt.legend()

# --- Examples of Functions --- #

results = import_data('')

# Graphical analysis of general trends over time
# May be useful to observe how reaction times changed depending on the interval
# Providing a start and end window will make the data easier to read when graphed
plot_trends('', start = 75, end = 100)

# Pitch 1

# Generating the mean and standard deviation
print('Pitch 1:')
p1_data = generate_data(results[0], print_out = True)

# Plotting the histogram
plot_hist(results[0], 'C4', alpha = 0.5) # Red is the default color

# Pitch 2

# Generating the mean and standard deviation
print('Pitch 2:')
p2_data = generate_data(results[1], print_out = True)

# Plotting the histogram
plot_hist(results[1], intervals = 7, label = 'D4', color = 'blue', alpha = 0.5)

# Pitch 3

# Generating the mean and standard deviation
print('Pitch 3:')
p3_data = generate_data(results[2], print_out = True)

# Plotting the histogram
plot_hist(results[2], intervals = 5, label = 'E4', color = 'green', alpha = 0.5)

# Graphical analysis of the means and standard deviations
mean = [p1_data[0], p2_data[0], p3_data[0]]
std = [p1_data[1], p2_data[1], p3_data[1]]
label = ['C4', 'D4', 'E4']
color = ['red', 'blue', 'green']

plot_analysis(mean, std, label, color)

# --- End of Example --- #
